commit d4d21f7650cbf7ec7f38a437fb40f448f04128bb
Author: rpm-build <rpm-build>
Date:   Wed Oct 10 11:02:12 2018 +0000

    stunnel4

diff --git a/src/client.c b/src/client.c
index f6e1bdb..6bf1de9 100644
--- a/src/client.c
+++ b/src/client.c
@@ -323,6 +323,58 @@ static void init_remote(CLI *c) {
         s_log(LOG_WARNING, "Failed to set remote socket options");
 }
 
+static int verify_cert_hostname(X509 *cert, const char *hostname) {
+  char *peername=NULL;
+  if (X509_check_host(cert, hostname, 0, X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT, &peername) > 0) {
+    s_log(LOG_INFO, "CERT: Host name \"%s\" matched with \"%s\"",
+          hostname, peername);
+    OPENSSL_free(peername);
+    return 1; /* accept */
+  }
+  s_log(LOG_WARNING, "CERT: Subject checks failed");
+  return 0;
+}
+
+static int post_connection_check(CLI *c) {
+    int ok = 0;
+    NAME_LIST *connect_list;
+    X509 *cert = 0;
+
+    if(c->opt->verify_level <= SSL_VERIFY_PEER) {
+        s_log(LOG_INFO, "Post check: verification level is low, skipping check");
+        return X509_V_OK;
+    }
+
+    if(!(cert = SSL_get_peer_certificate(c->ssl))) {
+        s_log(LOG_INFO, "Post check: No peer certificate!");
+        return X509_V_ERR_APPLICATION_VERIFICATION;
+    }
+
+    connect_list = c->opt->connect_list;
+
+    while(connect_list!=NULL) {
+        if(connect_list->name){
+            char *cfg_name;
+            char *port;
+            cfg_name = strdup(connect_list->name);
+            port = strrchr(cfg_name, ':');
+            if(port)
+                *port++ = '\0';
+            s_log(LOG_INFO, "Post check: Config hostname: %s", cfg_name);
+            if(verify_cert_hostname(cert, cfg_name))
+                ok = 1;
+            free(cfg_name);
+        }
+
+        connect_list = connect_list->next;
+    }
+
+    if(ok)
+        return SSL_get_verify_result(c->ssl);
+    else
+        return X509_V_ERR_APPLICATION_VERIFICATION;
+}
+
 static void init_ssl(CLI *c) {
     int i, err;
     SSL_SESSION *old_session;
@@ -432,6 +484,12 @@ static void init_ssl(CLI *c) {
             sslerror("SSL_accept");
         longjmp(c->err, 1);
     }
+
+    if(post_connection_check(c) != X509_V_OK) {
+	s_log(LOG_NOTICE, "Post connection cert verification failed");
+	longjmp(c->err, 1); /* bail */
+    }
+
     if(SSL_session_reused(c->ssl)) {
         s_log(LOG_INFO, "SSL %s: previous session reused",
             c->opt->option.client ? "connected" : "accepted");
diff --git a/src/common.h b/src/common.h
index 0efdd7c..0a1f84c 100644
--- a/src/common.h
+++ b/src/common.h
@@ -407,6 +407,8 @@ extern char *sys_errlist[];
 #include <openssl/err.h>
 #include <openssl/crypto.h> /* for CRYPTO_* and SSLeay_version */
 #include <openssl/rand.h>
+#include <openssl/conf.h>
+#include <openssl/x509v3.h>
 #ifndef OPENSSL_NO_MD4
 #include <openssl/md4.h>
 #endif
